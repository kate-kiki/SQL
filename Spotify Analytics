#For this project, I downloaded Spotify data as a CSV file from Kaggle, created a table to insert Spotify data into, and performed analytics on the data in SQLite Studio. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL);

/*What is the average popularity, danceability, and energy by artist and track?*/
SELECT artist_name,track_name,avg(popularity),avg(danceability),avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

/*Who are the top 10 artists by popularity?*/
SELECT artist_name
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

/*Which artists have multiple songs on the top 50 Spotify list?*/
SELECT artist_name, COUNT(track_name) AS total_tracks
FROM BIT_DB.SpotifyData
GROUP BY artist_name
HAVING total_tracks > 1
ORDER BY total_tracks desc;

/*How does the duration/length of each song in the top 50 Spotify list compare on average?*/
SELECT track_name, duration_ms AS 'Duration',
CASE
    WHEN duration_ms > (SELECT avg(duration_ms)FROM BIT_DB.SpotifyData) THEN 'Long'
    WHEN duration_ms < (SELECT avg(duration_ms)FROM BIT_DB.SpotifyData) THEN 'Short'
    ELSE 'Average'
END AS 'Song Length'
FROM BIT_DB.SpotifyData;

/*Where would be best to listen to each song in the top 50 Spotify list according to dancability, energy, and loudness?*/
SELECT track_name,
CASE
    WHEN danceability > (SELECT avg(danceability) FROM BIT_DB.Spotifydata)
        AND energy > (SELECT avg(energy)FROM BIT_DB.SpotifyData)
        AND loudness > (SELECT avg(loudness) FROM BIT_DB.SpotifyData)
        THEN 'Party'
    WHEN danceability < (SELECT avg(danceability) FROM BIT_DB.Spotifydata)
        AND energy > (SELECT avg(energy)FROM BIT_DB.SpotifyData)
        AND loudness > (SELECT avg(loudness) FROM BIT_DB.SpotifyData)
        THEN 'Gym'
    WHEN danceability < (SELECT avg(danceability) FROM BIT_DB.Spotifydata)
        AND energy < (SELECT avg(energy)FROM BIT_DB.SpotifyData)
        AND loudness < (SELECT avg(loudness) FROM BIT_DB.SpotifyData)
        THEN 'Study' 
    ELSE 'Home'
END AS 'Situation'
FROM BIT_DB.Spotifydata;

/*I created a temp table to calculate the average popularity for the artists in the Spotify data table. 
Then, for every artist with an average popularity of 90 or above, I showed their name, their average popularity, and label them as a “Top Star”.*/
WITH avgpopularity_CTE AS (
SELECT artist_name, avg(popularity) AS avg_pop
FROM SpotifyData
GROUP BY artist_name)

SELECT  artist_name,
        avg_pop,
        'Top Star' AS tag
FROM avgpopularity_CTE
WHERE avg_pop>=90;
